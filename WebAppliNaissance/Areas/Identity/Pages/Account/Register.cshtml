@page
@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@model WebAppliNaissance.Areas.Identity.Pages.Account.RegisterModel
@{
    ViewData["Title"] = "Register";
}

<h1>@ViewData["Title"]</h1>

<div class="row">
    <div class="col-md-4">
        <form id="registerForm" asp-route-returnUrl="@Model.ReturnUrl" method="post">
            <h2>Créer un nouveau compte</h2>
            <hr />
            <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>

            <!-- Email -->
            <div class="form-floating mb-3">
                <input asp-for="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label asp-for="Input.Email">Email</label>
                <span asp-validation-for="Input.Email" class="text-danger"></span>
            </div>

            <!-- Password -->
            <div class="form-floating mb-3">
                <input asp-for="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Mot de passe" />
                <label asp-for="Input.Password">Mot de passe</label>
                <span asp-validation-for="Input.Password" class="text-danger"></span>
            </div>

            <!-- Confirm Password -->
            <div class="form-floating mb-3">
                <input asp-for="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Confirmer mot de passe" />
                <label asp-for="Input.ConfirmPassword">Confirmer le mot de passe</label>
                <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
            </div>

            <!-- Rôle -->
            
            <div class="form-group">
                <label asp-for="Input.Role"></label>
                <select asp-for="Input.Role" class="form-control" asp-items="GetRolesForUser()">
                    <option value="">-- Sélectionnez un rôle --</option>
                    @foreach (var role in GetRolesForUser())
                    {
                        <option value="@role.Value">@role.Text</option>
                    }
                </select>
                <span asp-validation-for="Input.Role" class="text-danger"></span>
            </div>


            <!-- Code Admin (affiché seulement si "Admin" est sélectionné) -->
            <div class="form-floating mb-3" id="code-admin-div" style="display:none;">
                <input asp-for="Input.CodeAdmin" class="form-control" placeholder="Code Admin" />
                <label asp-for="Input.CodeAdmin">Code Admin</label>
                <span asp-validation-for="Input.CodeAdmin" class="text-danger"></span>
            </div>

            <button id="registerSubmit" type="submit" class="w-100 btn btn-lg btn-primary">S'inscrire</button>
        </form>
    </div>

    <!-- Connexion via un service externe -->
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Utiliser un autre service pour s'inscrire</h3>
            <hr />
            @if ((Model.ExternalLogins?.Count ?? 0) == 0)
            {
                <div>
                    <p>
                        Aucun service d’authentification externe n’est configuré. Voir cet
                        <a href="https://go.microsoft.com/fwlink/?LinkID=532715" target="_blank">
                            article
                        </a> pour configurer l’authentification externe.
                    </p>
                </div>
            }
            else
            {
                <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                    <div>
                        <p>
                            @foreach (var provider in Model.ExternalLogins!)
                            {
                                <button type="submit" class="btn btn-outline-primary" name="provider" value="@provider.Name">
                                    @provider.DisplayName
                                </button>
                            }
                        </p>
                    </div>
                </form>
            }
        </section>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const roleSelect = document.getElementById("Input_Role");
            const codeAdminDiv = document.getElementById("code-admin-div");

            function toggleCodeAdmin() {
                if (roleSelect.value === "Admin") {
                    codeAdminDiv.style.display = "block";
                } else {
                    codeAdminDiv.style.display = "none";
                    const inputCode = document.getElementById("Input_CodeAdmin");
                    if (inputCode) inputCode.value = "";
                }
            }
                @functions {
            public List<SelectListItem> GetRolesForUser()
            {
                    var roles = new List<SelectListItem>
                        {
                                new SelectListItem { Value = "Admin", Text = "Admin" }
                        };

                    if (SignInManager.IsSignedIn(User))
                    {
                            var user = UserManager.GetUserAsync(User).Result;
                            if (user != null && UserManager.IsInRoleAsync(user, "Admin").Result)
                            {
                                    roles.Add(new SelectListItem { Value = "Agent", Text = "Agent" });
                            }
                    }

                    return roles;
            }
    }

            roleSelect.addEventListener("change", toggleCodeAdmin);
            toggleCodeAdmin(); // Initial execution
        });
    </script>
}
